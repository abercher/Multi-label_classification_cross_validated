"""
Use trained model to parse text.
"""
import os
import pickle
import pandas as pd
import numpy as np
from Stack_overflow_post_and_title_multi_class.doc2vec_vectorization import Doc2VecTransformer


input_text = """
<p>I came up with a linear model, estimated it on the training set and generated $m$ predictions with a seperate test set containing a sample size of $m$ (with the response variable not included in the test set). </p>

<p>Should I compute the <a href="https://en.wikipedia.org/wiki/Mean_squared_prediction_error" rel="nofollow">mean squared prediction error</a> by subtracting the predictions from the mean of the $y$'s generated from the full test model ($y$'s generated by the test set with all the explanatory variables),<br>
or should I use the mean of the predictions ($y$'s generated by the test set with the explanatory variables specified for that particular linear model),<br>
or should I use the one with the minimum cv?</p>
"""

# Transform text into vector
model_input = pd.DataFrame({"Body":[input_text]})

transformer_fn = os.path.join(os.getcwd(), 'doc2vec_transformer.pkl')
with open(transformer_fn, mode='rb') as f:
    transformer = pickle.load(f)

transformed_input = transformer.transform(model_input)

# Compute binarized label with trained model
model_fn = os.path.join(os.getcwd(), 'binary_model_doc2vec.pkl')
with open(model_fn, mode='rb') as f:
    model = pickle.load(f)

bin_label = model.predict(transformed_input)

# Inverse transform binary labels into real labels
mlb_fn = os.path.join(os.getcwd(), 'mlb.pkl')
with open(mlb_fn, mode='rb') as f:
    mlb = pickle.load(f)

labels = mlb.inverse_transform(bin_label)

print(labels)


def predict_label(input_text):
    transformed_input = transformer.transform(model_input)
    bin_label = model.predict(transformed_input)
    labels = mlb.inverse_transform(bin_label)
    return labels


input_data_fn = os.path.join('train_raw.csv')
df = pd.read_csv(input_data_fn)
for i in range(100):
    pred_labels = predict_label(df.loc[i, 'Body'])
    if pred_labels != [()]:
        print(i)
        print('True labels:')
        print(df.loc[i, 'Tag'])
        print('Predicted labels')
        print(predict_label(df.loc[i, 'Body']))


